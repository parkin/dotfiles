#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@";
}

# Start an HTTP server from a directory, optionally specifying the port
# and the host
# Params:
#   $1 - port. Default is 8000.
#   $2 - host. Default is localhost.
function server() {
	if [[ $1 == '-h' ]]; then
		echo "Usage: server <host, default localhost> <port, default 8000>";
		return 1;
	fi;

	# Set defaults
	local host="${1:-localhost}";
	local port="${2:-8000}";

	#python -m SimpleHTTPServer ${ip}:${port}; # old way, defaults to external host
	echo "Serving HTTP on ${host} port ${port} ...";
	local script="import BaseHTTPServer as bhs, SimpleHTTPServer as shs; bhs.HTTPServer(('${host}', ${port}), shs.SimpleHTTPRequestHandler).serve_forever()";
	python -c "$script";
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the given location
function v() {
	if [ $# -eq 0 ]; then
		find . -maxdepth 1 -type f -exec vim {} +;
	else
		vim "$@";
	fi;
}

# `a` with no arguments opens the current direcory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# Create a SOCKS Tunnel with this command
# see https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel
function socks5() {
	if [[ $1 == '-h' ]]; then
		echo "Usage: socks5 <user@example.com> <port, default 8000>";
		echo "Use 'ps aux | grep ssh' to make sure process has been started. Look for 'ssh -D <port> -f -C -q -N <user@example.com>'";
		echo "Kill the process when you are finished";
		return 1;
	fi;

	if [ $# -eq 0 ]; then
		echo "Please specify a user@domain.";
		echo "";
		socks5 -h;
		return 1;
	fi;

	# Set defaults
	local domain="${1}";
	local port="${2:-8000}";

	echo "Starting SOCKS tunnel to ${domain} port ${port} ...";
	echo "Successful only if 'ssh -D <port> -f -C -q -N <user@example.com>' is shown below'";
	ssh -D "${port}" -f -C -q -N "${domain}";
	echo "";
	echo "ps aux | grep ssh";
	ps aux | grep ssh;
	echo "";
	echo "Kill the process when you are finished";
}
